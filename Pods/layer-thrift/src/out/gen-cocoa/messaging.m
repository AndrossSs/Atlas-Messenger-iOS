/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "messaging.h"

@implementation LYRTError

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (int) code message: (NSString *) message
{
  self = [super init];
  __code = code;
  __code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeIntForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeInt: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int) code {
  return __code;
}

- (void) setCode: (int) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Error"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__code_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'code' is not set."];
  }
  if (!__message_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'message' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Error("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LYRTEvent

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (int) type creator_id: (LYRTProviderUserId) creator_id seq: (int32_t) seq timestamp: (int64_t) timestamp preceding_seq: (int32_t) preceding_seq client_seq: (int32_t) client_seq subtype: (uint8_t) subtype metadata: (NSMutableDictionary *) metadata content_types: (NSMutableArray *) content_types inline_content_parts: (NSMutableArray *) inline_content_parts external_content_id: (LYRTUUID) external_content_id member_id: (LYRTProviderUserId) member_id target_seq: (int32_t) target_seq
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __creator_id = [creator_id retain_stub];
  __creator_id_isset = YES;
  __seq = seq;
  __seq_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __preceding_seq = preceding_seq;
  __preceding_seq_isset = YES;
  __client_seq = client_seq;
  __client_seq_isset = YES;
  __subtype = subtype;
  __subtype_isset = YES;
  __metadata = [metadata retain_stub];
  __metadata_isset = YES;
  __content_types = [content_types retain_stub];
  __content_types_isset = YES;
  __inline_content_parts = [inline_content_parts retain_stub];
  __inline_content_parts_isset = YES;
  __external_content_id = [external_content_id retain_stub];
  __external_content_id_isset = YES;
  __member_id = [member_id retain_stub];
  __member_id_isset = YES;
  __target_seq = target_seq;
  __target_seq_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"creator_id"])
  {
    __creator_id = [[decoder decodeObjectForKey: @"creator_id"] retain_stub];
    __creator_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"seq"])
  {
    __seq = [decoder decodeInt32ForKey: @"seq"];
    __seq_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeInt64ForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"preceding_seq"])
  {
    __preceding_seq = [decoder decodeInt32ForKey: @"preceding_seq"];
    __preceding_seq_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_seq"])
  {
    __client_seq = [decoder decodeInt32ForKey: @"client_seq"];
    __client_seq_isset = YES;
  }
  if ([decoder containsValueForKey: @"subtype"])
  {
    __subtype = [decoder decodeIntForKey: @"subtype"];
    __subtype_isset = YES;
  }
  if ([decoder containsValueForKey: @"metadata"])
  {
    __metadata = [[decoder decodeObjectForKey: @"metadata"] retain_stub];
    __metadata_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_types"])
  {
    __content_types = [[decoder decodeObjectForKey: @"content_types"] retain_stub];
    __content_types_isset = YES;
  }
  if ([decoder containsValueForKey: @"inline_content_parts"])
  {
    __inline_content_parts = [[decoder decodeObjectForKey: @"inline_content_parts"] retain_stub];
    __inline_content_parts_isset = YES;
  }
  if ([decoder containsValueForKey: @"external_content_id"])
  {
    __external_content_id = [[decoder decodeObjectForKey: @"external_content_id"] retain_stub];
    __external_content_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"member_id"])
  {
    __member_id = [[decoder decodeObjectForKey: @"member_id"] retain_stub];
    __member_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"target_seq"])
  {
    __target_seq = [decoder decodeInt32ForKey: @"target_seq"];
    __target_seq_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__creator_id_isset)
  {
    [encoder encodeObject: __creator_id forKey: @"creator_id"];
  }
  if (__seq_isset)
  {
    [encoder encodeInt32: __seq forKey: @"seq"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeInt64: __timestamp forKey: @"timestamp"];
  }
  if (__preceding_seq_isset)
  {
    [encoder encodeInt32: __preceding_seq forKey: @"preceding_seq"];
  }
  if (__client_seq_isset)
  {
    [encoder encodeInt32: __client_seq forKey: @"client_seq"];
  }
  if (__subtype_isset)
  {
    [encoder encodeInt: __subtype forKey: @"subtype"];
  }
  if (__metadata_isset)
  {
    [encoder encodeObject: __metadata forKey: @"metadata"];
  }
  if (__content_types_isset)
  {
    [encoder encodeObject: __content_types forKey: @"content_types"];
  }
  if (__inline_content_parts_isset)
  {
    [encoder encodeObject: __inline_content_parts forKey: @"inline_content_parts"];
  }
  if (__external_content_id_isset)
  {
    [encoder encodeObject: __external_content_id forKey: @"external_content_id"];
  }
  if (__member_id_isset)
  {
    [encoder encodeObject: __member_id forKey: @"member_id"];
  }
  if (__target_seq_isset)
  {
    [encoder encodeInt32: __target_seq forKey: @"target_seq"];
  }
}

- (void) dealloc
{
  [__creator_id release_stub];
  [__metadata release_stub];
  [__content_types release_stub];
  [__inline_content_parts release_stub];
  [__external_content_id release_stub];
  [__member_id release_stub];
  [super dealloc_stub];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) creator_id {
  return [[__creator_id retain_stub] autorelease_stub];
}

- (void) setCreator_id: (NSString *) creator_id {
  [creator_id retain_stub];
  [__creator_id release_stub];
  __creator_id = creator_id;
  __creator_id_isset = YES;
}

- (BOOL) creator_idIsSet {
  return __creator_id_isset;
}

- (void) unsetCreator_id {
  [__creator_id release_stub];
  __creator_id = nil;
  __creator_id_isset = NO;
}

- (int32_t) seq {
  return __seq;
}

- (void) setSeq: (int32_t) seq {
  __seq = seq;
  __seq_isset = YES;
}

- (BOOL) seqIsSet {
  return __seq_isset;
}

- (void) unsetSeq {
  __seq_isset = NO;
}

- (int64_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int64_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (int32_t) preceding_seq {
  return __preceding_seq;
}

- (void) setPreceding_seq: (int32_t) preceding_seq {
  __preceding_seq = preceding_seq;
  __preceding_seq_isset = YES;
}

- (BOOL) preceding_seqIsSet {
  return __preceding_seq_isset;
}

- (void) unsetPreceding_seq {
  __preceding_seq_isset = NO;
}

- (int32_t) client_seq {
  return __client_seq;
}

- (void) setClient_seq: (int32_t) client_seq {
  __client_seq = client_seq;
  __client_seq_isset = YES;
}

- (BOOL) client_seqIsSet {
  return __client_seq_isset;
}

- (void) unsetClient_seq {
  __client_seq_isset = NO;
}

- (uint8_t) subtype {
  return __subtype;
}

- (void) setSubtype: (uint8_t) subtype {
  __subtype = subtype;
  __subtype_isset = YES;
}

- (BOOL) subtypeIsSet {
  return __subtype_isset;
}

- (void) unsetSubtype {
  __subtype_isset = NO;
}

- (NSMutableDictionary *) metadata {
  return [[__metadata retain_stub] autorelease_stub];
}

- (void) setMetadata: (NSMutableDictionary *) metadata {
  [metadata retain_stub];
  [__metadata release_stub];
  __metadata = metadata;
  __metadata_isset = YES;
}

- (BOOL) metadataIsSet {
  return __metadata_isset;
}

- (void) unsetMetadata {
  [__metadata release_stub];
  __metadata = nil;
  __metadata_isset = NO;
}

- (NSMutableArray *) content_types {
  return [[__content_types retain_stub] autorelease_stub];
}

- (void) setContent_types: (NSMutableArray *) content_types {
  [content_types retain_stub];
  [__content_types release_stub];
  __content_types = content_types;
  __content_types_isset = YES;
}

- (BOOL) content_typesIsSet {
  return __content_types_isset;
}

- (void) unsetContent_types {
  [__content_types release_stub];
  __content_types = nil;
  __content_types_isset = NO;
}

- (NSMutableArray *) inline_content_parts {
  return [[__inline_content_parts retain_stub] autorelease_stub];
}

- (void) setInline_content_parts: (NSMutableArray *) inline_content_parts {
  [inline_content_parts retain_stub];
  [__inline_content_parts release_stub];
  __inline_content_parts = inline_content_parts;
  __inline_content_parts_isset = YES;
}

- (BOOL) inline_content_partsIsSet {
  return __inline_content_parts_isset;
}

- (void) unsetInline_content_parts {
  [__inline_content_parts release_stub];
  __inline_content_parts = nil;
  __inline_content_parts_isset = NO;
}

- (NSData *) external_content_id {
  return [[__external_content_id retain_stub] autorelease_stub];
}

- (void) setExternal_content_id: (NSData *) external_content_id {
  [external_content_id retain_stub];
  [__external_content_id release_stub];
  __external_content_id = external_content_id;
  __external_content_id_isset = YES;
}

- (BOOL) external_content_idIsSet {
  return __external_content_id_isset;
}

- (void) unsetExternal_content_id {
  [__external_content_id release_stub];
  __external_content_id = nil;
  __external_content_id_isset = NO;
}

- (NSString *) member_id {
  return [[__member_id retain_stub] autorelease_stub];
}

- (void) setMember_id: (NSString *) member_id {
  [member_id retain_stub];
  [__member_id release_stub];
  __member_id = member_id;
  __member_id_isset = YES;
}

- (BOOL) member_idIsSet {
  return __member_id_isset;
}

- (void) unsetMember_id {
  [__member_id release_stub];
  __member_id = nil;
  __member_id_isset = NO;
}

- (int32_t) target_seq {
  return __target_seq;
}

- (void) setTarget_seq: (int32_t) target_seq {
  __target_seq = target_seq;
  __target_seq_isset = YES;
}

- (BOOL) target_seqIsSet {
  return __target_seq_isset;
}

- (void) unsetTarget_seq {
  __target_seq_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreator_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSeq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPreceding_seq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setClient_seq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSubtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            NSData * _val3 = [inProtocol readBinary];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setMetadata: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size4;
          [inProtocol readListBeginReturningElementType: NULL size: &_size4];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size4];
          int _i5;
          for (_i5 = 0; _i5 < _size4; ++_i5)
          {
            NSString * _elem6 = [inProtocol readString];
            [fieldValue addObject: _elem6];
          }
          [inProtocol readListEnd];
          [self setContent_types: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size7;
          [inProtocol readListBeginReturningElementType: NULL size: &_size7];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size7];
          int _i8;
          for (_i8 = 0; _i8 < _size7; ++_i8)
          {
            NSData * _elem9 = [inProtocol readBinary];
            [fieldValue addObject: _elem9];
          }
          [inProtocol readListEnd];
          [self setInline_content_parts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setExternal_content_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMember_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTarget_seq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Event"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__creator_id_isset) {
    if (__creator_id != nil) {
      [outProtocol writeFieldBeginWithName: @"creator_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __creator_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__seq_isset) {
    [outProtocol writeFieldBeginWithName: @"seq" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __seq];
    [outProtocol writeFieldEnd];
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__preceding_seq_isset) {
    [outProtocol writeFieldBeginWithName: @"preceding_seq" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __preceding_seq];
    [outProtocol writeFieldEnd];
  }
  if (__client_seq_isset) {
    [outProtocol writeFieldBeginWithName: @"client_seq" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __client_seq];
    [outProtocol writeFieldEnd];
  }
  if (__subtype_isset) {
    [outProtocol writeFieldBeginWithName: @"subtype" type: TType_BYTE fieldID: 7];
    [outProtocol writeByte: __subtype];
    [outProtocol writeFieldEnd];
  }
  if (__metadata_isset) {
    if (__metadata != nil) {
      [outProtocol writeFieldBeginWithName: @"metadata" type: TType_MAP fieldID: 8];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__metadata count]];
        NSEnumerator * _iter10 = [__metadata keyEnumerator];
        id key11;
        while ((key11 = [_iter10 nextObject]))
        {
          [outProtocol writeString: key11];
          [outProtocol writeBinary: [__metadata objectForKey: key11]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_types_isset) {
    if (__content_types != nil) {
      [outProtocol writeFieldBeginWithName: @"content_types" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__content_types count]];
        int i13;
        for (i13 = 0; i13 < [__content_types count]; i13++)
        {
          [outProtocol writeString: [__content_types objectAtIndex: i13]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__inline_content_parts_isset) {
    if (__inline_content_parts != nil) {
      [outProtocol writeFieldBeginWithName: @"inline_content_parts" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__inline_content_parts count]];
        int i15;
        for (i15 = 0; i15 < [__inline_content_parts count]; i15++)
        {
          [outProtocol writeBinary: [__inline_content_parts objectAtIndex: i15]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__external_content_id_isset) {
    if (__external_content_id != nil) {
      [outProtocol writeFieldBeginWithName: @"external_content_id" type: TType_STRING fieldID: 11];
      [outProtocol writeBinary: __external_content_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__member_id_isset) {
    if (__member_id != nil) {
      [outProtocol writeFieldBeginWithName: @"member_id" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __member_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__target_seq_isset) {
    [outProtocol writeFieldBeginWithName: @"target_seq" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __target_seq];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Event("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",creator_id:"];
  [ms appendFormat: @"\"%@\"", __creator_id];
  [ms appendString: @",seq:"];
  [ms appendFormat: @"%i", __seq];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%qi", __timestamp];
  [ms appendString: @",preceding_seq:"];
  [ms appendFormat: @"%i", __preceding_seq];
  [ms appendString: @",client_seq:"];
  [ms appendFormat: @"%i", __client_seq];
  [ms appendString: @",subtype:"];
  [ms appendFormat: @"%i", __subtype];
  [ms appendString: @",metadata:"];
  [ms appendFormat: @"%@", __metadata];
  [ms appendString: @",content_types:"];
  [ms appendFormat: @"%@", __content_types];
  [ms appendString: @",inline_content_parts:"];
  [ms appendFormat: @"%@", __inline_content_parts];
  [ms appendString: @",external_content_id:"];
  [ms appendFormat: @"\"%@\"", __external_content_id];
  [ms appendString: @",member_id:"];
  [ms appendFormat: @"\"%@\"", __member_id];
  [ms appendString: @",target_seq:"];
  [ms appendFormat: @"%i", __target_seq];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LYRTStream

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStream_id: (LYRTUUID) stream_id member_ids: (NSMutableSet *) member_ids seq: (int32_t) seq
{
  self = [super init];
  __stream_id = [stream_id retain_stub];
  __stream_id_isset = YES;
  __member_ids = [member_ids retain_stub];
  __member_ids_isset = YES;
  __seq = seq;
  __seq_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stream_id"])
  {
    __stream_id = [[decoder decodeObjectForKey: @"stream_id"] retain_stub];
    __stream_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"member_ids"])
  {
    __member_ids = [[decoder decodeObjectForKey: @"member_ids"] retain_stub];
    __member_ids_isset = YES;
  }
  if ([decoder containsValueForKey: @"seq"])
  {
    __seq = [decoder decodeInt32ForKey: @"seq"];
    __seq_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stream_id_isset)
  {
    [encoder encodeObject: __stream_id forKey: @"stream_id"];
  }
  if (__member_ids_isset)
  {
    [encoder encodeObject: __member_ids forKey: @"member_ids"];
  }
  if (__seq_isset)
  {
    [encoder encodeInt32: __seq forKey: @"seq"];
  }
}

- (void) dealloc
{
  [__stream_id release_stub];
  [__member_ids release_stub];
  [super dealloc_stub];
}

- (NSData *) stream_id {
  return [[__stream_id retain_stub] autorelease_stub];
}

- (void) setStream_id: (NSData *) stream_id {
  [stream_id retain_stub];
  [__stream_id release_stub];
  __stream_id = stream_id;
  __stream_id_isset = YES;
}

- (BOOL) stream_idIsSet {
  return __stream_id_isset;
}

- (void) unsetStream_id {
  [__stream_id release_stub];
  __stream_id = nil;
  __stream_id_isset = NO;
}

- (NSMutableSet *) member_ids {
  return [[__member_ids retain_stub] autorelease_stub];
}

- (void) setMember_ids: (NSMutableSet *) member_ids {
  [member_ids retain_stub];
  [__member_ids release_stub];
  __member_ids = member_ids;
  __member_ids_isset = YES;
}

- (BOOL) member_idsIsSet {
  return __member_ids_isset;
}

- (void) unsetMember_ids {
  [__member_ids release_stub];
  __member_ids = nil;
  __member_ids_isset = NO;
}

- (int32_t) seq {
  return __seq;
}

- (void) setSeq: (int32_t) seq {
  __seq = seq;
  __seq_isset = YES;
}

- (BOOL) seqIsSet {
  return __seq_isset;
}

- (void) unsetSeq {
  __seq_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setStream_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_SET) {
          int _size16;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size16];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            NSString * _elem18 = [inProtocol readString];
            [fieldValue addObject: _elem18];
          }
          [inProtocol readSetEnd];
          [self setMember_ids: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSeq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Stream"];
  if (__stream_id_isset) {
    if (__stream_id != nil) {
      [outProtocol writeFieldBeginWithName: @"stream_id" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __stream_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__member_ids_isset) {
    if (__member_ids != nil) {
      [outProtocol writeFieldBeginWithName: @"member_ids" type: TType_SET fieldID: 2];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__member_ids count]];
        NSEnumerator * _iter19 = [__member_ids objectEnumerator];
        id obj20;
        while ((obj20 = [_iter19 nextObject]))
        {
          [outProtocol writeString: obj20];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__seq_isset) {
    [outProtocol writeFieldBeginWithName: @"seq" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __seq];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__stream_id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'stream_id' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Stream("];
  [ms appendString: @"stream_id:"];
  [ms appendFormat: @"\"%@\"", __stream_id];
  [ms appendString: @",member_ids:"];
  [ms appendFormat: @"%@", __member_ids];
  [ms appendString: @",seq:"];
  [ms appendFormat: @"%i", __seq];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LYRTResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (LYRTError *) error event: (LYRTEvent *) event seq: (int32_t) seq stream: (LYRTStream *) stream streams: (NSMutableSet *) streams
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  __event = [event retain_stub];
  __event_isset = YES;
  __seq = seq;
  __seq_isset = YES;
  __stream = [stream retain_stub];
  __stream_isset = YES;
  __streams = [streams retain_stub];
  __streams_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"event"])
  {
    __event = [[decoder decodeObjectForKey: @"event"] retain_stub];
    __event_isset = YES;
  }
  if ([decoder containsValueForKey: @"seq"])
  {
    __seq = [decoder decodeInt32ForKey: @"seq"];
    __seq_isset = YES;
  }
  if ([decoder containsValueForKey: @"stream"])
  {
    __stream = [[decoder decodeObjectForKey: @"stream"] retain_stub];
    __stream_isset = YES;
  }
  if ([decoder containsValueForKey: @"streams"])
  {
    __streams = [[decoder decodeObjectForKey: @"streams"] retain_stub];
    __streams_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__event_isset)
  {
    [encoder encodeObject: __event forKey: @"event"];
  }
  if (__seq_isset)
  {
    [encoder encodeInt32: __seq forKey: @"seq"];
  }
  if (__stream_isset)
  {
    [encoder encodeObject: __stream forKey: @"stream"];
  }
  if (__streams_isset)
  {
    [encoder encodeObject: __streams forKey: @"streams"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [__event release_stub];
  [__stream release_stub];
  [__streams release_stub];
  [super dealloc_stub];
}

- (LYRTError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (LYRTError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (LYRTEvent *) event {
  return [[__event retain_stub] autorelease_stub];
}

- (void) setEvent: (LYRTEvent *) event {
  [event retain_stub];
  [__event release_stub];
  __event = event;
  __event_isset = YES;
}

- (BOOL) eventIsSet {
  return __event_isset;
}

- (void) unsetEvent {
  [__event release_stub];
  __event = nil;
  __event_isset = NO;
}

- (int32_t) seq {
  return __seq;
}

- (void) setSeq: (int32_t) seq {
  __seq = seq;
  __seq_isset = YES;
}

- (BOOL) seqIsSet {
  return __seq_isset;
}

- (void) unsetSeq {
  __seq_isset = NO;
}

- (LYRTStream *) stream {
  return [[__stream retain_stub] autorelease_stub];
}

- (void) setStream: (LYRTStream *) stream {
  [stream retain_stub];
  [__stream release_stub];
  __stream = stream;
  __stream_isset = YES;
}

- (BOOL) streamIsSet {
  return __stream_isset;
}

- (void) unsetStream {
  [__stream release_stub];
  __stream = nil;
  __stream_isset = NO;
}

- (NSMutableSet *) streams {
  return [[__streams retain_stub] autorelease_stub];
}

- (void) setStreams: (NSMutableSet *) streams {
  [streams retain_stub];
  [__streams release_stub];
  __streams = streams;
  __streams_isset = YES;
}

- (BOOL) streamsIsSet {
  return __streams_isset;
}

- (void) unsetStreams {
  [__streams release_stub];
  __streams = nil;
  __streams_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LYRTError *fieldValue = [[LYRTError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          LYRTEvent *fieldValue = [[LYRTEvent alloc] init];
          [fieldValue read: inProtocol];
          [self setEvent: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSeq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          LYRTStream *fieldValue = [[LYRTStream alloc] init];
          [fieldValue read: inProtocol];
          [self setStream: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_SET) {
          int _size21;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size21];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            LYRTStream *_elem23 = [[LYRTStream alloc] init];
            [_elem23 read: inProtocol];
            [fieldValue addObject: _elem23];
            [_elem23 release_stub];
          }
          [inProtocol readSetEnd];
          [self setStreams: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Response"];
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__event_isset) {
    if (__event != nil) {
      [outProtocol writeFieldBeginWithName: @"event" type: TType_STRUCT fieldID: 2];
      [__event write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__seq_isset) {
    [outProtocol writeFieldBeginWithName: @"seq" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __seq];
    [outProtocol writeFieldEnd];
  }
  if (__stream_isset) {
    if (__stream != nil) {
      [outProtocol writeFieldBeginWithName: @"stream" type: TType_STRUCT fieldID: 4];
      [__stream write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__streams_isset) {
    if (__streams != nil) {
      [outProtocol writeFieldBeginWithName: @"streams" type: TType_SET fieldID: 5];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRUCT size: [__streams count]];
        NSEnumerator * _iter24 = [__streams objectEnumerator];
        id obj25;
        while ((obj25 = [_iter24 nextObject]))
        {
          [obj25 write: outProtocol];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Response("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",event:"];
  [ms appendFormat: @"%@", __event];
  [ms appendString: @",seq:"];
  [ms appendFormat: @"%i", __seq];
  [ms appendString: @",stream:"];
  [ms appendFormat: @"%@", __stream];
  [ms appendString: @",streams:"];
  [ms appendFormat: @"%@", __streams];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static int32_t LYRTVERSION = 3;

@implementation LYRTmessagingConstants
+ (void) initialize {
}
+ (int32_t) VERSION{
  return LYRTVERSION;
}
@end

